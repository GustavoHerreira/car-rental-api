# Basicamente docker-compose só que com Hot Reload

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # Comando para substituir o ENTRYPOINT do Dockerfile('dotnet watch' para habilitar o hot reload).
    command: ["dotnet", "watch", "run", "--project", "CarRentalAPI.API/CarRentalAPI.csproj", "--urls", "http://+:8080"]
    ports:
      - "8080:8080"
    environment:
      # env como Development
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
    volumes:
      # Bind Mount: Espelha o código local para dentro do contêiner.
      # Qualquer alteração no código é refletida instantaneamente.
      - ./CarRentalAPI.API:/src/CarRentalAPI.API
      - ./CarRentalAPI.sln:/src/CarRentalAPI.sln
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Expõe a porta do banco para conexão externa (Rider, DBeaver)
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data: